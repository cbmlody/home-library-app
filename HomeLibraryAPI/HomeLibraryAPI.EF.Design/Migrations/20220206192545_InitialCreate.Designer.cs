// <auto-generated />
using System;
using HomeLibraryAPI.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeLibraryAPI.EF.Design.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20220206192545_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Authors_Books", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("Authors_Books");
                });

            modelBuilder.Entity("Bookshelves_Books", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookshelvesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksId", "BookshelvesId");

                    b.HasIndex("BookshelvesId");

                    b.ToTable("Bookshelves_Books");
                });

            modelBuilder.Entity("HomeLibraryAPI.EF.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dcfad00e-0ea4-458a-b002-9ba54935c52c"),
                            FirstName = "Author",
                            LastName = "Test"
                        },
                        new
                        {
                            Id = new Guid("08a61211-6bfd-4ffb-9c1b-395f6d1b17c4"),
                            FirstName = "AuthorName",
                            LastName = "Last",
                            MiddleName = "Middle"
                        });
                });

            modelBuilder.Entity("HomeLibraryAPI.EF.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookSeriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CoverType")
                        .HasColumnType("int");

                    b.Property<string>("EAN")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<short>("Pages")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("Volume")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BookSeriesId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c80e88ef-455f-42fc-ad9f-0cec12d2363f"),
                            CoverType = 2,
                            EAN = "1111111111111",
                            Pages = (short)100,
                            Title = "Test Book Title",
                            Volume = (short)1
                        },
                        new
                        {
                            Id = new Guid("69c10efb-0fc3-4b87-bb1b-a06263d19d63"),
                            CoverType = 1,
                            EAN = "2222222222222",
                            Pages = (short)150,
                            Title = "Test Book",
                            Volume = (short)1
                        },
                        new
                        {
                            Id = new Guid("042ef9b5-c3e1-45ee-bf40-f1ff39510348"),
                            CoverType = 2,
                            EAN = "1212111111111",
                            Pages = (short)620,
                            Title = "Dummy Book",
                            Volume = (short)1
                        },
                        new
                        {
                            Id = new Guid("f3a34a7e-fa46-4c25-bbeb-55b5eacd7f93"),
                            CoverType = 2,
                            EAN = "1313131313133",
                            Pages = (short)400,
                            Title = "Test Book Title",
                            Volume = (short)2
                        });
                });

            modelBuilder.Entity("HomeLibraryAPI.EF.Models.BookSeries", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BookSeries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("216de672-375e-4412-9e5e-4fce850a0d7c"),
                            Name = "Dummy Book series"
                        });
                });

            modelBuilder.Entity("HomeLibraryAPI.EF.Models.Bookshelve", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Bookshelves");
                });

            modelBuilder.Entity("HomeLibraryAPI.EF.Models.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e47b5498-596e-4aa9-aaf5-5778ce5170b8"),
                            Name = "Dummy Publisher"
                        });
                });

            modelBuilder.Entity("Authors_Books", b =>
                {
                    b.HasOne("HomeLibraryAPI.EF.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Author_Books");

                    b.HasOne("HomeLibraryAPI.EF.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Book_Authors");
                });

            modelBuilder.Entity("Bookshelves_Books", b =>
                {
                    b.HasOne("HomeLibraryAPI.EF.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Book_Bookshelves");

                    b.HasOne("HomeLibraryAPI.EF.Models.Bookshelve", null)
                        .WithMany()
                        .HasForeignKey("BookshelvesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Bookshelve_Books");
                });

            modelBuilder.Entity("HomeLibraryAPI.EF.Models.Book", b =>
                {
                    b.HasOne("HomeLibraryAPI.EF.Models.BookSeries", "BookSeries")
                        .WithMany("Books")
                        .HasForeignKey("BookSeriesId");

                    b.HasOne("HomeLibraryAPI.EF.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId");

                    b.Navigation("BookSeries");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("HomeLibraryAPI.EF.Models.BookSeries", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("HomeLibraryAPI.EF.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
